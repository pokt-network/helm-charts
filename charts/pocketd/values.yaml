purpose: full-node

homeDirectory: /home/pocket/.pocket
chownDataDirTo: 1025 # forces `chown` of the data directory to the following UID/GUID
# when true, removes upgrade-info.json on startup. It should not interfere with `x/upgrade`.
# It is helpful when we need to skip an upgrade (unsafe-skip-upgrades), and cosmovisor picks up the upgrade-info.json
removeUpgradeInfoOnStart: false

runStatefulSetPocketd: true # Allows us to scale to 0 replicas, essentially turning off the full node

image:
  repository: ghcr.io/pokt-network/pocketd
  tag: latest
  pullPolicy: IfNotPresent

snapshot:
  enabled: false # Set to true to use snapshot syncing
  network: "testnet-beta" # Options: "testnet-alpha", "testnet-beta", "mainnet"
  baseUrl: "https://snapshots.us-nj.poktroll.com"
  image:
    repository: "ubuntu" # Base image with required tools
    tag: "22.04"
    pullPolicy: "IfNotPresent"

resources:
  {}
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 2000m
  #   memory: 2048Mi

containerSecurityContext:
  runAsUser: 1025
  runAsGroup: 1025
  # capabilities:
  #   drop:
  #     - ALL

logs:
  level: info
  format: plain

persistence:
  enabled: true
  className: ""
  size: 1Gi
  existingClaim: ""
  useCustomName: false # Enable custom naming
  customName: "" # The custom name to be used if useCustomName is true

config:
  unsafeSkipUpgrades: [] # Array of block heights to skip upgrades
  p2p:
    externalAddress: ""
    seedMode: false
    seeds: ""
    persistentPeers: ""
    unconditionalPeerIds: ""

serviceP2P:
  type: ClusterIP
  port: 26656
  annotations: {}
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster

service:
  type: ClusterIP
  ports:
    rpc: 26657
    grpc: 9090
    api: 1317
    cometBFTMetrics: 26660

serviceMonitor:
  enabled: false
  interval: 30s

ingress:
  rpc:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
    hosts:
      []
      # - name: rpc-endpoint.example.com
    tls:
      secretName: ""
  grpc:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
    hosts:
      []
      # - name: grpc-endpoint.example.com
    tls:
      secretName: ""
  api:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
    hosts:
      []
      # - name: api-endpoint.example.com
    tls:
      secretName: ""

# Name of the secret that contains `node_key.json` and `priv_validator_key.json`.
nodeKeysSecretName: ""

# TODO: Add pre-generated config maps when we have a stable public network.
genesis:
  # Name of the Config Map that containts the genesis.json of the network
  configMapName: ""
  configMapKey: genesis.json

# Allows to provide custom `app.toml`, `client.toml` and `config.toml`. Default files are supplied in `files/config` directory.
customConfigsConfigMap:
  enabled: false
  name: ""

# Custom labels to add to pods
podLabels:
  {}
  # example-label: example-value

# Pod scheduling
nodeSelector:
  {}
  # kubernetes.io/arch: amd64
  # node-role.kubernetes.io/worker: "true"

tolerations:
  []
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "blockchain"
  #   effect: "NoSchedule"

affinity:
  {}
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #   - labelSelector:
  #       matchExpressions:
  #       - key: app.kubernetes.io/name
  #         operator: In
  #         values:
  #         - pocketd
  #     topologyKey: kubernetes.io/hostname

topologySpreadConstraints:
  []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name: pocketd

# Pod configuration
podAnnotations:
  {}
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "26660"

podSecurityContext: {}

priorityClassName: ""

terminationGracePeriodSeconds: 30

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Update strategy
updateStrategy:
  type: RollingUpdate

# Health checks
livenessProbe:
  enabled: true
  httpGet:
    path: /
    port: 26657
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /
    port: 26657
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

startupProbe:
  enabled: true
  httpGet:
    path: /
    port: 26657
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Additional configurations
imagePullSecrets:
  []
  # - name: myregistrykey

extraArgs:
  []
  # - "--some-extra-flag=value"

extraEnvVars:
  []
  # - name: EXTRA_VAR
  #   value: "value"

extraVolumes:
  []
  # - name: extra-volume
  #   configMap:
  #     name: extra-config

extraVolumeMounts:
  []
  # - name: extra-volume
  #   mountPath: /extra-config

# Network configuration
hostNetwork: false
dnsPolicy: ClusterFirst
dnsConfig:
  {}
  # nameservers:
  #   - 1.1.1.1
  # searches:
  #   - ns1.svc.cluster.local

# StatefulSet specific
podManagementPolicy: OrderedReady

cosmovisor:
  enabled: false
  restartAfterUpgrade: true
  allowDownloadBinaries: true
  unsafeSkipBackup: true
