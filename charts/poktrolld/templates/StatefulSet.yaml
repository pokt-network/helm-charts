apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "poktrolld.fullname" . | quote }}
spec:
  serviceName: {{ include "poktrolld.fullname" . | quote }}
  replicas: 1 # With how the helm chart is built, this should always be 1.
  selector:
    matchLabels:
      {{- include "poktrolld.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "poktrolld.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      initContainers:
      # Initializes `priv_validator_state` if it doesn't exist.
      - name: init-priv-validator-state
        image: busybox
        command: ['sh', '-c', 'if [ ! -f {{ .Values.homeDirectory }}/data/priv_validator_state.json ]; then echo "{\"height\": \"0\", \"round\": 0, \"step\": 0}" > {{ .Values.homeDirectory }}/data/priv_validator_state.json; fi']
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}/data
          subPath: data
      {{- if .Values.chownDataDirTo }}
      - name: init-permissions
        image: busybox
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        command:
          - sh
          - -c
          - |
            mkdir -p {{ .Values.homeDirectory }}/config && \
            chown -R {{ .Values.chownDataDirTo }}:{{ .Values.chownDataDirTo }} {{ .Values.homeDirectory }} && \
            chmod -R 755 {{ .Values.homeDirectory }}
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}
      {{- end }}
      {{- if .Values.snapshot.enabled }}
      # Init container for snapshot download and extraction
      - name: init-snapshot
        image: debian:stable-slim
        command:
          - sh
          - -c
          - |
            set -e
            apt-get update
            apt-get install -y curl aria2 zstd jq tar
            
            # Use the snapshot baseUrl to determine latest snapshot height and version
            NETWORK="{{ .Values.config.network }}"
            BASE_URL="{{ .Values.snapshot.baseUrl }}"
            SNAPSHOT_DIR="{{ .Values.homeDirectory }}/snapshot"
            
            # Create directories
            mkdir -p $SNAPSHOT_DIR
            mkdir -p {{ .Values.homeDirectory }}/data
            
            # Check if data directory is empty before doing snapshot sync
            if [ "$(ls -A {{ .Values.homeDirectory }}/data)" ]; then
              echo "Data directory not empty, skipping snapshot download"
              exit 0
            fi
            
            # Get snapshot information
            echo "Fetching latest snapshot information for $NETWORK"
            {{- if .Values.snapshot.latestHeight }}
            LATEST_HEIGHT="{{ .Values.snapshot.latestHeight }}"
            {{- else }}
            LATEST_HEIGHT=$(curl -s "$BASE_URL/$NETWORK-latest-archival.txt")
            {{- end }}
            
            if [ -z "$LATEST_HEIGHT" ]; then
              echo "Failed to get latest snapshot height. Exiting."
              exit 1
            fi
            echo "Latest snapshot height: $LATEST_HEIGHT"
            
            {{- if .Values.snapshot.version }}
            SNAPSHOT_VERSION="{{ .Values.snapshot.version }}"
            {{- else }}
            SNAPSHOT_VERSION=$(curl -s "$BASE_URL/$NETWORK-$LATEST_HEIGHT-version.txt")
            {{- end }}
            
            if [ -z "$SNAPSHOT_VERSION" ]; then
              echo "Failed to get snapshot version. Exiting."
              exit 1
            fi
            echo "Snapshot version: $SNAPSHOT_VERSION"
            
            # Determine URL for torrent download
            {{- if .Values.snapshot.url }}
            SNAPSHOT_URL="{{ .Values.snapshot.url }}"
            {{- else }}
            SNAPSHOT_URL="$BASE_URL/$NETWORK-latest-archival.torrent"
            {{- end }}
            
            echo "Downloading snapshot from: $SNAPSHOT_URL"
            cd $SNAPSHOT_DIR
            
            # Download using torrent
            aria2c --seed-time=0 --file-allocation=none --continue=true \
                  --max-connection-per-server=4 --max-concurrent-downloads=16 --split=16 \
                  --bt-enable-lpd=true --bt-max-peers=100 --bt-prioritize-piece=head,tail \
                  --bt-seed-unverified \
                  "$SNAPSHOT_URL"
            
            # Find the downloaded file
            SNAPSHOT_FILE=$(find . -type f -name "*.tar.*" | head -n 1)
            
            if [ -z "$SNAPSHOT_FILE" ]; then
              echo "No snapshot file found after download. Exiting."
              exit 1
            fi
            
            echo "Extracting snapshot file: $SNAPSHOT_FILE"
            # Extract based on file type
            if [[ "$SNAPSHOT_FILE" == *.tar.zst ]]; then
              zstd -d "$SNAPSHOT_FILE" --stdout | tar -xf - -C {{ .Values.homeDirectory }}/data
            elif [[ "$SNAPSHOT_FILE" == *.tar.gz ]]; then
              tar -zxf "$SNAPSHOT_FILE" -C {{ .Values.homeDirectory }}/data
            else
              echo "Unknown snapshot format: $SNAPSHOT_FILE"
              exit 1
            fi
            
            echo "Snapshot extracted successfully"
            # Cleanup
            cd {{ .Values.homeDirectory }}
            rm -rf $SNAPSHOT_DIR
        securityContext:
          runAsUser: 0  # Run as root to install packages
          runAsGroup: 0
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}
      {{- end }}
      {{- if and .Values.genesisRepo.downloadConfigs (not (default false .Values.customConfigsConfigMap.enabled)) }}
      # Init container to download configurations from genesis repo
      - name: init-genesis-configs
        image: debian:stable-slim
        command:
          - sh
          - -c
          - |
            set -e
            apt-get update
            apt-get install -y curl jq
            
            # Setup variables
            CONFIG_DIR="{{ .Values.homeDirectory }}/config"
            NETWORK="{{ .Values.config.network }}"
            BRANCH="{{ .Values.genesisRepo.branch }}"
            BASE_URL="{{ .Values.genesisRepo.baseUrl }}/${BRANCH}/shannon/${NETWORK}"
            
            # Create config directory
            mkdir -p $CONFIG_DIR
            
            # Verify network is set
            if [ -z "$NETWORK" ]; then
              echo "Error: config.network is not set. Please specify a network (testnet-alpha, testnet-beta, mainnet)"
              exit 1
            fi
            
            # Download genesis.json
            echo "Downloading genesis.json from $BASE_URL/genesis.json"
            curl -s -o $CONFIG_DIR/genesis.json "$BASE_URL/genesis.json"
            if [ ! -f $CONFIG_DIR/genesis.json ]; then
              echo "Failed to download genesis.json"
              exit 1
            fi
            
            # Download app.toml
            echo "Downloading app.toml from $BASE_URL/app.toml"
            curl -s -o $CONFIG_DIR/app.toml "$BASE_URL/app.toml"
            if [ ! -f $CONFIG_DIR/app.toml ]; then
              echo "Failed to download app.toml"
              exit 1
            fi
            
            # Download client.toml
            echo "Downloading client.toml from $BASE_URL/client.toml"
            curl -s -o $CONFIG_DIR/client.toml "$BASE_URL/client.toml"
            if [ ! -f $CONFIG_DIR/client.toml ]; then
              echo "Failed to download client.toml"
              exit 1
            fi
            
            # Download config.toml
            echo "Downloading config.toml from $BASE_URL/config.toml"
            curl -s -o $CONFIG_DIR/config.toml "$BASE_URL/config.toml"
            if [ ! -f $CONFIG_DIR/config.toml ]; then
              echo "Failed to download config.toml"
              exit 1
            fi
            
            # Download seeds file and update config.toml with seeds
            echo "Downloading seeds from $BASE_URL/seeds"
            SEEDS=$(curl -s "$BASE_URL/seeds")
            if [ -n "$SEEDS" ]; then
              echo "Updating config.toml with seeds: $SEEDS"
              sed -i -e "s|^seeds *=.*|seeds = \"$SEEDS\"|" $CONFIG_DIR/config.toml
            else
              echo "No seeds found, using default or specified values"
            fi
            
            # Extract chain_id from genesis.json
            CHAIN_ID=$(jq -r '.chain_id' < $CONFIG_DIR/genesis.json)
            if [ -z "$CHAIN_ID" ]; then
              echo "Failed to extract chain_id from genesis file."
              exit 1
            fi
            echo "Using chain_id: $CHAIN_ID from genesis file"
            
            # Set ownership if needed
            {{- if .Values.chownDataDirTo }}
            chown -R {{ .Values.chownDataDirTo }}:{{ .Values.chownDataDirTo }} $CONFIG_DIR
            {{- end }}
            
            echo "Configuration files downloaded successfully"
        securityContext:
          runAsUser: 0  # Run as root to install packages
          runAsGroup: 0
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}
      {{- end }}
      {{- if .Values.cosmovisor.enabled }}
      - name: init-cosmovisor
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        securityContext:
          runAsUser: {{ .Values.chownDataDirTo | default 0 }}
          runAsGroup: {{ .Values.chownDataDirTo | default 0 }}
        env:
        - name: DAEMON_NAME
          value: "poktrolld"
        - name: DAEMON_HOME
          value: {{ .Values.homeDirectory | quote }}
        - name: DAEMON_RESTART_AFTER_UPGRADE
          value: {{ .Values.cosmovisor.restartAfterUpgrade | quote }}
        - name: DAEMON_ALLOW_DOWNLOAD_BINARIES
          value: {{ .Values.cosmovisor.allowDownloadBinaries | quote }}
        - name: UNSAFE_SKIP_BACKUP
          value: {{ .Values.cosmovisor.unsafeSkipBackup | quote }}
        command:
          - sh
          - -c
          - |
            if [ ! -f {{ .Values.homeDirectory }}/cosmovisor/genesis/bin/poktrolld ]; then
              cosmovisor init /bin/poktrolld
            fi
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}
      {{- end }}
      containers:
      - name: poktrolld
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- if .Values.cosmovisor.enabled }}
        command: ["/bin/cosmovisor"]
        env:
        - name: DAEMON_NAME
          value: "poktrolld"
        - name: DAEMON_HOME
          value: {{ .Values.homeDirectory | quote }}
        - name: DAEMON_RESTART_AFTER_UPGRADE
          value: {{ .Values.cosmovisor.restartAfterUpgrade | quote }}
        - name: DAEMON_ALLOW_DOWNLOAD_BINARIES
          value: {{ .Values.cosmovisor.allowDownloadBinaries | quote }}
        - name: UNSAFE_SKIP_BACKUP
          value: {{ .Values.cosmovisor.unsafeSkipBackup | quote }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
{{ toYaml .Values.containerSecurityContext | indent 12 }}
        ports:
        - containerPort: {{ .Values.service.ports.rpc }}
          name: rpc
        - containerPort: {{ .Values.service.ports.grpc }}
          name: grpc
        - containerPort: {{ .Values.service.ports.api }}
          name: api
        - containerPort: {{ .Values.service.ports.cometBFTMetrics }}
          name: comet-metrics
        - containerPort: {{ .Values.serviceP2P.port }}
          name: p2p
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: {{ .Values.service.ports.rpc }}
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: {{ .Values.service.ports.rpc }}
        args:
        {{- if .Values.cosmovisor.enabled }}
        - run
        {{- end }}
        - start
        - --api.address=tcp://0.0.0.0:{{ .Values.service.ports.api }}
        - --rpc.laddr=tcp://0.0.0.0:{{ .Values.service.ports.rpc }}
        - --p2p.laddr=0.0.0.0:{{ .Values.serviceP2P.port }}
        - --grpc.address=0.0.0.0:{{ .Values.service.ports.grpc }}
        - --p2p.unconditional_peer_ids={{ .Values.config.p2p.unconditionalPeerIds }}
        - --p2p.seeds={{ .Values.config.p2p.seeds }}
        - --p2p.seed_mode={{ .Values.config.p2p.seedMode }}
        - --p2p.persistent_peers={{ .Values.config.p2p.persistentPeers }}
        - --log_level={{ .Values.logs.level }}
        - --log_format={{ .Values.logs.format }}
        - --minimum-gas-prices=0.0001upokt
        - --metrics.prometheus=true
        - --chain-id={{ .Values.config.chainID | default "" }}
        {{- if .Values.config.p2p.externalAddress }}
        - --p2p.external-address={{ .Values.config.p2p.externalAddress }}
        {{- end }}
        {{- if .Values.config.unsafeSkipUpgrades }}
        - --unsafe-skip-upgrades={{ join "," .Values.config.unsafeSkipUpgrades }}
        {{- end }}
        {{- range .Values.config.additionalArgs }}
        - {{ . }}
        {{- end }}
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}/
        - name: node-keys
          mountPath: "{{ .Values.homeDirectory }}/config/node_key.json"
          subPath: "node_key.json"
        - name: node-keys
          mountPath: "{{ .Values.homeDirectory }}/config/priv_validator_key.json"
          subPath: "priv_validator_key.json"
        {{- if not .Values.genesisRepo.downloadConfigs }}
        - name: genesis-volume
          mountPath: "{{ .Values.homeDirectory }}/config/genesis.json"
          subPath: {{ .Values.externalConfigs.genesis.configMapKey | quote }}
        - name: config-volume
          mountPath: "{{ .Values.homeDirectory }}/config/app.toml"
          subPath: "app.toml"
        - name: config-volume
          mountPath: "{{ .Values.homeDirectory }}/config/config.toml"
          subPath: "config.toml"
        - name: config-volume
          mountPath: "{{ .Values.homeDirectory }}/config/client.toml"
          subPath: "client.toml"
        {{- end }}
      volumes:
      - name: pocket-volume
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}
            {{- .Values.persistence.existingClaim | quote }}
          {{- else if .Values.persistence.useCustomName }}
            {{- .Values.persistence.customName | quote }}
          {{- else }}
            {{- printf "%s-data" (include "poktrolld.fullname" .) | quote }}
          {{- end }}
        {{- else }}
          emptyDir: {}
        {{- end }}
      {{- if not .Values.genesisRepo.downloadConfigs }}
      - name: genesis-volume
        configMap:
          name: {{ default (.Values.genesis.configMapName | quote) (.Values.externalConfigs.genesis.configMapName | quote) }}
      - name: config-volume
        configMap:
{{- if not (or .Values.externalConfigs.customConfigsConfigMap.enabled .Values.customConfigsConfigMap.enabled) }}
          name: {{ include "poktrolld.fullname" . }}-configs
{{- else }}
          name: {{ default (.Values.customConfigsConfigMap.name | quote) (.Values.externalConfigs.customConfigsConfigMap.name | quote) }}
{{- end }}
          items:
          - key: app.toml
            path: app.toml
          - key: client.toml
            path: client.toml
          - key: config.toml
            path: config.toml
      {{- end }}
      - name: node-keys
        secret:
          secretName: {{ .Values.nodeKeysSecretName }}
