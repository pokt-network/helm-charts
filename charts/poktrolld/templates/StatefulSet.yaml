apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "poktrolld.fullname" . | quote }}
spec:
  serviceName: {{ include "poktrolld.fullname" . | quote }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "poktrolld.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "poktrolld.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      # Initializes `priv_validator_state` if it doesn't exist.
      - name: init-priv-validator-state
        image: busybox
        command: ['sh', '-c', 'if [ ! -f {{ .Values.homeDirectory }}/data/priv_validator_state.json ]; then echo "{\"height\": \"0\", \"round\": 0, \"step\": 0}" > {{ .Values.homeDirectory }}/data/priv_validator_state.json; fi']
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}/data
          subPath: data
      {{- if .Values.chownDataDirTo }}
      - name: init-permissions
        image: busybox
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        command:
          - sh
          - -c
          - |
            mkdir -p {{ .Values.homeDirectory }}/config && \
            chown -R {{ .Values.chownDataDirTo }}:{{ .Values.chownDataDirTo }} {{ .Values.homeDirectory }} && \
            chmod -R 755 {{ .Values.homeDirectory }}
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}
      {{- end }}
      {{- if .Values.cosmovisor.enabled }}
      - name: init-cosmovisor
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        securityContext:
          runAsUser: {{ .Values.chownDataDirTo | default 0 }}
          runAsGroup: {{ .Values.chownDataDirTo | default 0 }}
        env:
        - name: DAEMON_NAME
          value: "poktrolld"
        - name: DAEMON_HOME
          value: {{ .Values.homeDirectory | quote }}
        - name: DAEMON_RESTART_AFTER_UPGRADE
          value: {{ .Values.cosmovisor.restartAfterUpgrade | quote }}
        - name: DAEMON_ALLOW_DOWNLOAD_BINARIES
          value: {{ .Values.cosmovisor.allowDownloadBinaries | quote }}
        - name: UNSAFE_SKIP_BACKUP
          value: {{ .Values.cosmovisor.unsafeSkipBackup | quote }}
        command:
          - sh
          - -c
          - |
            if [ ! -f {{ .Values.homeDirectory }}/cosmovisor/genesis/bin/poktrolld ]; then
              cosmovisor init /bin/poktrolld
            fi
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}
      {{- end }}
      containers:
      - name: poktrolld
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy | quote }}
        {{- if .Values.cosmovisor.enabled }}
        command: ["/bin/cosmovisor"]
        env:
        - name: DAEMON_NAME
          value: "poktrolld"
        - name: DAEMON_HOME
          value: {{ .Values.homeDirectory | quote }}
        - name: DAEMON_RESTART_AFTER_UPGRADE
          value: {{ .Values.cosmovisor.restartAfterUpgrade | quote }}
        - name: DAEMON_ALLOW_DOWNLOAD_BINARIES
          value: {{ .Values.cosmovisor.allowDownloadBinaries | quote }}
        - name: UNSAFE_SKIP_BACKUP
          value: {{ .Values.cosmovisor.unsafeSkipBackup | quote }}
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
{{ toYaml .Values.containerSecurityContext | indent 12 }}
        ports:
        - containerPort: {{ .Values.service.ports.rpc }}
          name: rpc
        - containerPort: {{ .Values.service.ports.grpc }}
          name: grpc
        - containerPort: {{ .Values.service.ports.api }}
          name: api
        - containerPort: {{ .Values.service.ports.cometBFTMetrics }}
          name: comet-metrics
        - containerPort: {{ .Values.serviceP2P.port }}
          name: p2p
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: {{ .Values.service.ports.rpc }}
        # readinessProbe:
        #   httpGet:
        #     path: /
        #     port: {{ .Values.service.ports.rpc }}
        args:
        {{- if .Values.cosmovisor.enabled }}
        - run
        {{- end }}
        - start
        - --api.address=tcp://0.0.0.0:{{ .Values.service.ports.api }}
        - --rpc.laddr=tcp://0.0.0.0:{{ .Values.service.ports.rpc }}
        - --p2p.laddr=0.0.0.0:{{ .Values.serviceP2P.port }}
        - --grpc.address=0.0.0.0:{{ .Values.service.ports.grpc }}
        - --p2p.unconditional_peer_ids={{ .Values.config.p2p.unconditionalPeerIds }}
        - --p2p.seeds={{ .Values.config.p2p.seeds }}
        - --p2p.seed_mode={{ .Values.config.p2p.seedMode }}
        - --p2p.persistent_peers={{ .Values.config.p2p.persistentPeers }}
        - --log_level={{ .Values.logs.level }}
        - --log_format={{ .Values.logs.format }}
        {{- if .Values.config.p2p.externalAddress }}
        - --p2p.external-address={{ .Values.config.p2p.externalAddress }}
        {{- end }}
        {{- if .Values.config.unsafeSkipUpgrades }}
        - --unsafe-skip-upgrades={{ join "," .Values.config.unsafeSkipUpgrades }}
        {{- end }}
        volumeMounts:
        - name: pocket-volume
          mountPath: {{ .Values.homeDirectory }}/
        - name: node-keys
          mountPath: "{{ .Values.homeDirectory }}/config/node_key.json"
          subPath: "node_key.json"
        - name: node-keys
          mountPath: "{{ .Values.homeDirectory }}/config/priv_validator_key.json"
          subPath: "priv_validator_key.json"
        - name: genesis-volume
          mountPath: "{{ .Values.homeDirectory }}/config/genesis.json"
          subPath: {{ .Values.genesis.configMapKey | quote }}
        - name: config-volume
          mountPath: "{{ .Values.homeDirectory }}/config/app.toml"
          subPath: "app.toml"
        - name: config-volume
          mountPath: "{{ .Values.homeDirectory }}/config/config.toml"
          subPath: "config.toml"
        - name: config-volume
          mountPath: "{{ .Values.homeDirectory }}/config/client.toml"
          subPath: "client.toml"
      volumes:
      - name: pocket-volume
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}
            {{- .Values.persistence.existingClaim | quote }}
          {{- else if .Values.persistence.useCustomName }}
            {{- .Values.persistence.customName | quote }}
          {{- else }}
            {{- printf "%s-data" (include "poktrolld.fullname" .) | quote }}
          {{- end }}
        {{- else }}
          emptyDir: {}
        {{- end }}
      - name: genesis-volume
        configMap:
          name: {{ .Values.genesis.configMapName | quote }}
      - name: config-volume
        configMap:
{{- if not .Values.customConfigsConfigMap.enabled }}
          name: {{ include "poktrolld.fullname" . }}-configs
{{- else }}
          name: {{ .Values.customConfigsConfigMap.name | quote }}
{{- end }}
          items:
          - key: app.toml
            path: app.toml
          - key: client.toml
            path: client.toml
          - key: config.toml
            path: config.toml
      - name: node-keys
        secret:
          secretName: {{ .Values.nodeKeysSecretName }}
