# TODO: Remove legacy compatibility in future release
# The following legacy settings should be removed when no longer needed:
# 1. genesis.configMapName - replaced by externalConfigs.genesis.configMapName
# 2. customConfigsConfigMap.enabled - replaced by externalConfigs.customConfigsConfigMap.enabled
# 3. customConfigsConfigMap.name - replaced by externalConfigs.customConfigsConfigMap.name
# 4. Support for deriving network name from namespace
# 5. Any compatibility code in StatefulSet.yaml (if checks for both old and new paths)

purpose: full-node

# Should be /home/pocket/.poktroll after we fully adopt production images
homeDirectory: /root/.poktroll
chownDataDirTo: "" # forces `chown` of the data directory to the following UID/GUID

image:
  repository: ghcr.io/pokt-network/poktrolld
  tag: latest
  pullPolicy: IfNotPresent

# Node Configuration
config:
  # Network configuration (REQUIRED - user must specify)
  network:
    {
      {
        .Values.config.network | default (regexFind "testnet-\\w+" .Release.Namespace) | default "",
      },
    }

  # P2P configuration
  p2p:
    externalAddress: ""
    seedMode: false
    seeds: ""
    persistentPeers: ""
    unconditionalPeerIds: ""

  # Chain configuration
  chainID: "" # If empty, will be extracted from genesis.json
  unsafeSkipUpgrades: [] # Array of block heights to skip upgrades

  # Additional command-line arguments for poktrolld
  additionalArgs: []

# Snapshot configuration for fast sync
# If enabled, node will download latest snapshot instead of syncing from genesis
snapshot:
  enabled: false
  baseUrl: "https://snapshots.us-nj.poktroll.com"
  # Optional overrides
  latestHeight: "" # If empty, will fetch from baseUrl
  version: "" # If empty, will fetch from baseUrl
  url: "" # If empty, will construct from baseUrl and network

# Genesis repository configuration (preferred method for acquiring configuration files)
genesisRepo:
  downloadConfigs: true
  branch: "master"
  baseUrl: "https://raw.githubusercontent.com/pokt-network/pocket-network-genesis"

# Use existing configs (only if genesisRepo.downloadConfigs is false)
# This is only for advanced use cases where you need custom configurations
externalConfigs:
  # Genesis configuration (required if downloadConfigs is false)
  genesis:
    configMapName: { { .Values.genesis.configMapName | default "" } }
    configMapKey: "genesis.json"

  # Custom config files (optional, will use default if not provided)
  customConfigsConfigMap:
    enabled: { { .Values.customConfigsConfigMap.enabled | default false } }
    name: { { .Values.customConfigsConfigMap.name | default "" } }

# Cosmovisor configuration for automatic upgrades
cosmovisor:
  enabled: false
  restartAfterUpgrade: true
  allowDownloadBinaries: true
  unsafeSkipBackup: false

# Node keys for validation
nodeKeysSecretName: ""

# Resource configuration
resources:
  {}
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 2000m
  #   memory: 2048Mi

# Container security
containerSecurityContext:
  {}
  # readOnlyRootFilesystem: true
  # allowPrivilegeEscalation: false
  # capabilities:
  #   drop:
  #     - ALL

# Logging configuration
logs:
  level: info
  format: plain

# Storage configuration
persistence:
  enabled: true
  className: ""
  size: 1Gi
  existingClaim: ""
  useCustomName: false
  customName: ""

# Service configurations
serviceP2P:
  type: ClusterIP
  port: 26656
  annotations: {}
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster

service:
  type: ClusterIP
  ports:
    rpc: 26657
    grpc: 9090
    api: 1317
    cometBFTMetrics: 26660

# Monitoring configuration
serviceMonitor:
  enabled: false
  interval: 30s

# Ingress configurations
ingress:
  rpc:
    enabled: false
    annotations: {}
    hosts: []
    tls:
      secretName: ""
  grpc:
    enabled: false
    annotations: {}
    hosts: []
    tls:
      secretName: ""
  api:
    enabled: false
    annotations: {}
    hosts: []
    tls:
      secretName: ""

# Custom labels to add to pods
podLabels: {}
